#
# IMPORTANT!: After editing control.rnc run "make" to generate the
# RNG file and commit _both_ files to Git to keep them in sync!
#
# We do not generate the RNG file at build time as it adds huge dependecy (it
# is a Java tool so it requires complete Java stack)
#

default namespace = "http://www.suse.com/1.0/yast2ns"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace config = "http://www.suse.com/1.0/configns"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

## Defined data-types

BOOLEAN =
  (
    attribute config:type { "boolean" },
    ( "true" | "false" )
  )

INTEGER =
  (
    attribute config:type { "integer" },
    xsd:integer
  )

SYMBOL =
  (
    attribute config:type { "symbol" }
  )

LIST =
  attribute config:type { "list" }

DISKSIZE =
  (
    attribute config:type { "disksize" },
    (
      "unlimited"
      | list {
        xsd:integer,
        (
          "B"
          | "KiB" | "MiB" | "GiB" | "TiB" | "PiB" | "EiB" | "ZiB" | "YiB"
          | "KB" | "MB" | "GB" | "TB" | "PB" | "EB" | "ZB" | "YB"
        )
      }
    )
  )

ANY =
  (
    BOOLEAN | INTEGER | SYMBOL | LIST | text
  )

YES_NO =
  (
    "yes" | "no"
  )

# types

textdomain = element textdomain { text }

# globals

globals_elements =
    incomplete_translation_treshold
    | additional_kernel_parameters
    | ui_mode
    | base_product_license_directory
    | enable_autologin
    | enable_firewall
    | firewall_enable_ssh
    | enable_sshd
    | write_hostname_to_hosts
    | dhclient_set_hostname
    | run_init_scripts_in_parallel
    | inform_about_suboptimal_distribution
    | skip_language_dialog
    | enable_clone
    | save_y2logs
    | enable_register_hwdata
    | enable_register_optional
    | disable_os_prober
    | display_register_forcereg
    | disable_register_w3m
    | register_monthly
    | manual_online_update
    | root_password_as_first_user
    | root_password_ca_check
    | enable_local_users
    | show_online_repositories
    | online_repositories_default
    | show_addons
    | addons_default
    | kexec_reboot
    | rle_offer_rulevel_4
    | default_ntp_setup
    | save_instsys_content
    | displaymanager_shutdown
    | enable_kdump
    | polkit_default_privs
    | debug_workflow
    | subworkflows
    | default_subworkflow
    | language
    | timezone
    | readonly_timezone
    | enable_autologin
    | default_target
    | require_registration
    | services_proposal
    | debug_deploying
    | show_drivers_info
    | self_update_url
    | self_update_id
    | self_update_version
    | installation_ui
    | full_system_media_name
    | full_system_download_url

## Default kernel parameters proposed by bootloader
additional_kernel_parameters =		element additional_kernel_parameters { text }
## How much per cent is the minimum coverage of translations to consider
## it being 'complete'. Less are reported if user tries to switch to such
## language during installation / upgrade.
incomplete_translation_treshold =	element incomplete_translation_treshold { text }
## Directory where the base-product (e.g., SLES) license files are stored
base_product_license_directory =	element base_product_license_directory { text }
## Defines an UI mode used in some modules to differentiate between
## 'simple' and 'expert' (obsolete).
ui_mode =				element ui_mode { "expert" | "simple" }
## Writes DISPLAYMANAGER_SHUTDOWN to /etc/sysconfig/displaymanager
## if set
displaymanager_shutdown =		element displaymanager_shutdown { text }
## Writes POLKIT_DEFAULT_PRIVS to /etc/sysconfig/security
## if set
polkit_default_privs =			element polkit_default_privs { text }
## Defines the default subworkflow name (smaller subworkflow
## created from another workflow).
## Used by Wagon.
default_subworkflow =			element default_subworkflow { text }
## Default language
language =				element language { text }
## Default timezone
timezone =				element timezone { text }
## Timezone cannot be changed by the user
readonly_timezone =			element readonly_timezone { BOOLEAN }
## Default runlevel
default_target =				element default_target { text }

## Debugging feature, makes workflow manaher to write
## more detailed log entries
debug_workflow =			element debug_workflow { BOOLEAN }
## Default value for autologin
enable_autologin =			element enable_autologin { BOOLEAN }
## Default value for firewall
enable_firewall =			element enable_firewall { BOOLEAN }
## Default value for opening port for SSH in firewall
firewall_enable_ssh =			element firewall_enable_ssh { BOOLEAN }
## Default value for SSHD service
enable_sshd =			        element enable_sshd { BOOLEAN }
## Default value whether to write a system hostname to /etc/hosts
write_hostname_to_hosts =		element write_hostname_to_hosts { BOOLEAN }
## Default value whether to change hostname via DHCP
dhclient_set_hostname =		element dhclient_set_hostname { BOOLEAN }
## Defines whether startup scripts should run in a parallel mode.
## This speeds the starting up but it is worse for debugging.
## *obsolete* without replacement
run_init_scripts_in_parallel =		element run_init_scripts_in_parallel { BOOLEAN }
inform_about_suboptimal_distribution =	element inform_about_suboptimal_distribution { BOOLEAN }
skip_language_dialog =			element skip_language_dialog { BOOLEAN }
## Defines whether an AytoYaST cloning feature should be enabled
enable_clone =				element enable_clone { BOOLEAN }
## Defines if YaST logs are collected after finishing the installation/update
## Default is true.
## The TAR file will be stored in /var/log/YaST2/yast-installation-logs.tar.xz.
save_y2logs =				element save_y2logs { BOOLEAN }
## Default value for 'send hardware data' with registration
## *obsolete* without replacement
enable_register_hwdata =		element enable_register_hwdata { BOOLEAN }
## Default value for 'send optional system data' with registration
## *obsolete* without replacement
enable_register_optional =		element enable_register_optional { BOOLEAN }
## Defines if by default os probing should be disabled see. Default is false. (bnc#884007)
disable_os_prober =			element disable_os_prober { BOOLEAN }
## *obsolete* without replacement
display_register_forcereg =		element display_register_forcereg { BOOLEAN }
## *obsolete* without replacement
disable_register_w3m =			element disable_register_w3m { BOOLEAN }
## *obsolete* without replacement
register_monthly =			element register_monthly { BOOLEAN }
manual_online_update =			element manual_online_update { BOOLEAN }
root_password_as_first_user =		element root_password_as_first_user { BOOLEAN }
root_password_ca_check =		element root_password_ca_check { BOOLEAN }
enable_local_users =                    element enable_local_users { BOOLEAN }
show_online_repositories =		element show_online_repositories { BOOLEAN }
online_repositories_default =		element online_repositories_default { BOOLEAN }
show_addons =				element show_addons { BOOLEAN }
addons_default =			element addons_default { BOOLEAN }
## Defines whether kexec is the preferred mode instead of rebooting
## between the first and the second stage of installation
kexec_reboot =				element kexec_reboot { BOOLEAN }
## Defines whether a special runlevel 4 should be offered
## *obsolete* without replacement
rle_offer_rulevel_4 =			element rle_offer_rulevel_4 { BOOLEAN }
default_ntp_setup =			element default_ntp_setup { BOOLEAN }
## Defines whether kdump is enabled by default
enable_kdump =				element enable_kdump { BOOLEAN }
require_registration =			element require_registration { BOOLEAN }
show_drivers_info =			element show_drivers_info { BOOLEAN }
# Self-update URL (FATE#319716).
## How it works?
## here are three related keys for self update - URL, ID, and VERSION.
## The ID and VERSION are used to ask SCC for update URL.
## The URL is used as fallback when SCC query failed.
self_update_url =			element self_update_url { text }
# Self-update id (bsc#1055556).
## It is the ID used to query SCC for the self update repo.
self_update_id =			element self_update_id { text }
## It is the version used to query SCC for the self update repo.
self_update_version =			element self_update_version { text }
# Installation UI (boo#1088785)
## Enables alternative look of installation with sidebar
installation_ui =			element installation_ui { "sidebar" }
# Media name which contains ALL packages for an useful installation
# full_system_download_url has also to be set in order to display it.
full_system_media_name =		element full_system_media_name { text }
# URL where the media described in full_system_download_url is located.
# full_system_media_name has also to be set in order to display it.
full_system_download_url =		element full_system_download_url { text }

## Defines which pieces of installation system should be copied to
## the installed system before rebooting to second stage.
save_instsys_content = element save_instsys_content {
    LIST,
    element save_instsys_item {
	## Where to copy the installation-system file or directory
	## Absolut path is required.
	element system_directory { text } &
	## Which file or directory to copy to installed system
	## Absolut path is required.
	element instsys_directory { text }
    }+
}

services_proposal = element services_proposal {
    LIST,
    element service {
	element label_id { text }? &
	element service_names { text } &
	element firewall_plugins { text }? &
	element enabled_by_default { BOOLEAN }? &
	element packages { text }?
    }+
}

subworkflows = element subworkflows {
    LIST,
    element subworkflow {
	element name { text } &
	element modules {
	    LIST,
	    element module { text }+
	}? &
	element proposals {
	    LIST,
	    element proposal { text }+
	}?
    }+
}

## Global variables
globals = element globals {
    globals_elements*
}

# globals

# software

software_elements =
    delete_old_packages
    | delete_old_packages_reverse_list
    | disable_media_repo
    | silently_downgrade_packages
    | silently_downgrade_packages_reverse_list
    | products_supported_for_upgrade
    | selection_type
    | system_scenarios
    | default_system_scenario
    | supported_desktops
    | default_desktop
    | display_support_status
    | clone_install_recommended_default
    | online_repos_preselected
    | external_sources_link
    | dropped_packages
    | extra_urls
    | base_selection
    | packages_affecting_pkg_manager
    | software_base
    | software_addons
    | software_packages
    | kernel_packages
    | packages_transmogrify
    | default_patterns
    | optional_default_patterns
    | upgrade
    | minimalistic_libzypp_config

## Whether it is allowed to delete a package during upgrade
## *obsolete* without replacement
delete_old_packages = element delete_old_packages { BOOLEAN }
## Used in packager to distinguish whether cd / dvd repositories
## should be disabled after installation or not.
disable_media_repo = element disable_media_repo { BOOLEAN }
selection_type = element selection_type { SYMBOL, text }
## System scenario selected by default.
## Used in inst_scenarios client.
default_system_scenario = element default_system_scenario { text }
## Desktop selected by default
default_desktop = element default_desktop { text }
display_support_status = element display_support_status { BOOLEAN }
clone_install_recommended_default = element clone_install_recommended_default { BOOLEAN }
silently_downgrade_packages = element silently_downgrade_packages { BOOLEAN }
online_repos_preselected = element online_repos_preselected { BOOLEAN }
external_sources_link = element external_sources_link { text }
## Packages that should be removed by the upgrade.
## Comma and/or space-separated list of packages
dropped_packages = element dropped_packages { text }

base_selection = element base_selection { text }
software_base = element base { text }

## a client that is called to modifiy the list of selected kernel packages
packages_transmogrify = element packages_transmogrify { text }

software_addons = element addons {
    LIST,
    element addon { text }+
}

software_packages = element packages {
    LIST,
    element package { text }+
}

kernel_packages = element kernel_packages {
    LIST,
    element package { text }+
}

## *obsolete* without replacement
delete_old_packages_reverse_list = element delete_old_packages_reverse_list {
    LIST,
    element regexp_item { text }+
}

## Scenarios supported by inst_scenarios client
system_scenarios = element system_scenarios {
    LIST,
    ## One scenario item
    element system_scenario {
	## Unique id that points to texts
	element id { text } &
	## Space or tab-separated list of patterns required by a particular scenario
	element patterns { text } &
	## Name of an icon file (without suffix)
	element icon { text }
    }+
}

supported_desktops = element supported_desktops {
    LIST,
    element one_supported_desktop {
	element name { text } &
	element desktop { text } &
	element label_id { text }? &
	element logon { text } &
	element cursor { text } &
	element packages { text }? &
	element order { INTEGER }? &
	element patterns { text } &
	element icon { text }? &
	element description_id { text }?
    }+
}

## List of products supported to be upgraded by this product
products_supported_for_upgrade = element products_supported_for_upgrade {
    LIST,
    ## One regular expression to match a product to upgrade
    element regexp_item { text }+
}

silently_downgrade_packages_reverse_list = element silently_downgrade_packages_reverse_list {
    LIST,
    element regexp_item { text }+
}

extra_urls = element extra_urls {
    LIST,
    element extra_url {
	element baseurl { text } &
	element name { text }? &
	element alias { text }? &
	element prod_dir { text }? &
	element enabled { BOOLEAN }? &
	element autorefresh { BOOLEAN }? &
	element priority { INTEGER }?
    }+
}

packages_affecting_pkg_manager = element packages_affecting_pkg_manager {
    LIST,
    element package { text }+
}

## Space-separated list of default patterns selected for installation.
## If such a pattern doesn't exist, error is reported. To omit reporting
## such error, use optional_default_patterns instead.
## These patterns are not selected in auto-installation.
default_patterns = element default_patterns { text }

## Space-separated list of (optional) default patterns for installation.
## These patterns will be selected only if they exist and thus it will
## never report any error if a pattern is not found. Use default_patterns
## for mandatory default patterns.
## These patterns are not selected in auto-installation.
optional_default_patterns = element optional_default_patterns { text }

## Defines behavior during upgrade
upgrade = element upgrade {
    ## Optional list of upgrade paths for default window manager set
    ## in /etc/sysconfig/windowmanager:DEFAULT_WM (not all cases need to be handled)
    element window_managers {
        LIST,
        element window_manager {
          ## Windowmanager as found in /etc/sysconfig/windowmanager:DEFAULT_WM
          ## This entry is mandatory
          element sysconfig_wm { text } &
          ## Space-separated list of packages to check whether the selected desktop
          ## is really installed on the system
          element check_packages { text }? &
          ## Either install_patterns or install_packages (or both) must be defined
          (
              ## Optional list of space-separated patterns that should be
              ## selected for installation
              element install_patterns { text } |
              ## Optional list of space-separated packages that should be
              ## selected for installation
              element install_packages { text }
          )+
        }*
    }?
}

## Software / Package-manager related variables
software = element software {
    software_elements*
}

## Minimalistic libzypp configuration (only requires, no documentation and no multiversion)
minimalistic_libzypp_config = element minimalistic_libzypp_config { BOOLEAN }

# software

# partitioning

# An overview of partitioning related settings can be found in
# https://github.com/yast/yast-storage-ng/blob/master/doc/old_and_new_proposal.md

# ng: one proposal and one volume list
ng_partitioning_elements =
    partitioning_proposal
    & partitioning_volumes
    & expert_partitioner_warning?

# legacy: the old stuff, mixed together
legacy_partitioning_elements =
    try_separate_home
    | limit_try_home
    | home_path
    | home_fs
    | root_fs
    | root_space_percent
    | root_base_size
    | root_max_size
    | proposal_lvm
    | vm_desired_size
    | vm_home_max_size
    | use_separate_multipath_module
    | prefer_remove
    | vm_keep_unpartitioned_region
    | remove_special_partitions
    | partitions
    | btrfs_increase_percentage
    | btrfs_default_subvolume
    | proposal_settings_editable
    | expert_partitioner_warning
    | root_subvolume_read_only
    | subvolumes

# you can either have the new 'ng' style elements or the old 'legacy' ones
partitioning_elements =
     ng_partitioning_elements | legacy_partitioning_elements*

# legacy element definitions

try_separate_home =		element try_separate_home { BOOLEAN }
limit_try_home =		element limit_try_home { text }
home_path =                     element home_path { text }
home_fs =                       element home_fs { text }
root_fs =                       element root_fs { text }
root_space_percent =		element root_space_percent { text }
root_base_size =		element root_base_size { text }
root_max_size =			element root_max_size { text }
proposal_lvm =			element proposal_lvm { BOOLEAN }
vm_desired_size =		element vm_desired_size { text }
vm_home_max_size =		element vm_home_max_size { text }
prefer_remove =			element prefer_remove { BOOLEAN }
remove_special_partitions =	element remove_special_partitions { BOOLEAN }
vm_keep_unpartitioned_region =	element vm_keep_unpartitioned_region { BOOLEAN }
# used by HASI Add-On
use_separate_multipath_module =	element use_separate_multipath_module { BOOLEAN }
btrfs_increase_percentage =	element btrfs_increase_percentage { INTEGER }
btrfs_default_subvolume =	element btrfs_default_subvolume { text }
proposal_settings_editable =    element proposal_settings_editable { BOOLEAN }
expert_partitioner_warning =    element expert_partitioner_warning { BOOLEAN }
root_subvolume_read_only =      element root_subvolume_read_only { BOOLEAN }

## Optional, but if this element appears (even if it's empty),
## the internal fallback list is not used
subvolumes = element subvolumes {
    LIST,
    subvolume*
}?

subvolume = element subvolume {
    ## subvolume path without leading /
    element path { text } &

    ## Optional: COW; default: true
    element copy_on_write { BOOLEAN }? &

    ## Optional: comma-separated architectures (default: all)
    ## Prepend ! to negate
    ## Example 1: i386,x86_64
    ## Example 2: ppc,!board_powernv
    ## (i.e. on PPC, but not if it's a board_powernv machine
    element archs { text }?
}

# these have to be defined by Storage
partitions = element partitions {
    LIST,
    element listentry {
	element * { ANY }*
    }*,
    element partition {
	element * { ANY }*
    }*
}

# ng element definitions

partitioning_proposal = element proposal { partitioning_proposal_elements }

partitioning_proposal_elements =
    ng_lvm?
    & ng_resize_windows?
    & ng_windows_delete_mode?
    & ng_linux_delete_mode?
    & ng_other_delete_mode?
    & ng_lvm_vg_strategy?
    & ng_lvm_vg_size?
    & proposal_settings_editable?

ng_lvm = element lvm { BOOLEAN }
ng_resize_windows = element resize_windows { BOOLEAN }
ng_windows_delete_mode = element windows_delete_mode { SYMBOL, ng_delete_mode_enum }
ng_linux_delete_mode = element linux_delete_mode { SYMBOL, ng_delete_mode_enum }
ng_other_delete_mode = element other_delete_mode { SYMBOL, ng_delete_mode_enum }
ng_lvm_vg_strategy = element lvm_vg_strategy { SYMBOL, ng_lvm_vg_strategy_enum }
ng_lvm_vg_size = element lvm_vg_size { DISKSIZE }

ng_delete_mode_enum = "none" | "ondemand" | "all"
ng_lvm_vg_strategy_enum = "use_available" | "use_needed" | "use_vg_size"

partitioning_volumes =  element volumes {
  LIST,
  partitioning_volume+
}

partitioning_volume = element volume { partitioning_volume_elements }

partitioning_volume_elements =
  ng_mount_point?
  & ng_proposed?
  & ng_proposed_configurable?
  & ng_fs_types?
  & ng_fs_type?
  & ng_desired_size?
  & ng_min_size?
  & ng_max_size?
  & ng_max_size_lvm?
  & ng_weight?
  & ng_adjust_by_ram?
  & ng_adjust_by_ram_configurable?
  & ng_fallback_for_desired_size?
  & ng_fallback_for_min_size?
  & ng_fallback_for_max_size?
  & ng_fallback_for_max_size_lvm?
  & ng_fallback_for_weight?
  & ng_snapshots?
  & ng_snapshots_configurable?
  & ng_snapshots_size_or_percentage?
  & ng_subvolumes?
  & ng_btrfs_default_subvolume?
  & ng_disable_order?
  & ng_btrfs_read_only?

ng_snapshots_size_or_percentage = ng_snapshots_size | ng_snapshots_percentage

ng_mount_point = element mount_point { text }
ng_proposed = element proposed { BOOLEAN }
ng_proposed_configurable = element proposed_configurable { BOOLEAN }
ng_fs_types = element fs_types { text }
ng_fs_type = element fs_type { text }
ng_desired_size = element desired_size { DISKSIZE }
ng_min_size = element min_size { DISKSIZE }
ng_max_size = element max_size { DISKSIZE }
ng_max_size_lvm = element max_size_lvm { DISKSIZE }
ng_weight = element weight { INTEGER }
ng_adjust_by_ram = element adjust_by_ram { BOOLEAN }
ng_adjust_by_ram_configurable = element adjust_by_ram_configurable { BOOLEAN }
ng_fallback_for_desired_size = element fallback_for_desired_size { text }
ng_fallback_for_min_size = element fallback_for_min_size { text }
ng_fallback_for_max_size = element fallback_for_max_size { text }
ng_fallback_for_max_size_lvm = element fallback_for_max_size_lvm { text }
ng_fallback_for_weight = element fallback_for_weight { text }
ng_snapshots = element snapshots { BOOLEAN }
ng_snapshots_configurable = element snapshots_configurable { BOOLEAN }
ng_snapshots_size = element snapshots_size { DISKSIZE }
ng_snapshots_percentage = element snapshots_percentage { INTEGER }
ng_subvolumes = subvolumes
ng_btrfs_default_subvolume = element btrfs_default_subvolume { text }
ng_disable_order = element disable_order { INTEGER }
ng_btrfs_read_only = element btrfs_read_only { BOOLEAN }

## Partitioning-related variables
partitioning = element partitioning {
    partitioning_elements
}

# partitioning

# network

network_elements =
    force_static_ip
    | network_manager
    | startmode

force_static_ip =	element force_static_ip { BOOLEAN }
network_manager =	element network_manager { text }
startmode =		element startmode { text }

## Network configuration-related variables
network = element network {
    network_elements*
}

# network

# system_roles

## System Roles, FATE#317481
system_roles = element system_roles {
    LIST,
    ## The first one is preselected in the dialog.
    ## If empty, the dialog is skipped.
    system_role*
}

system_role = element system_role {
    ## An identifier not visible to the user.
    ## Used to identify the translated user visible strings in the
    ## texts section: ${id} and ${id}_description.
    element id { text } &

    ## option to not preselect any role, by default,
    ## the first one (by sort order, see below) is preselected
    ## Only the first (by sort order, see below) role should have this key, others are ignored.
    element no_default { BOOLEAN }? &

    ## Option for order of role. Roles are sorted by order, the smaller first. It can be negative.
    ## If two roles have same order, then result is undefined, so try to avoid it.
    element order { INTEGER } &

    ## Role specific overrides for Partitioning
    partitioning? &

    ## Role specific overrides for Software
    software? &

    ## Additional dialogs that are runned when given role is selected, comma separated
    element additional_dialogs { text }? &

    ## Additional services configuration for given role
    role_services? &

    ## Role specific overrides for Global
    globals* &

    ## Role specific overrides for Network
    network* &

    ## Role specific overrides for Proposals
    proposals* &

    ## Role specific overrides for Cloned modules
    clone_modules*
}

role_services = element services {
    LIST,
    ## specification of one service for given role
    role_service*
}

role_service = element service {
    element name { text }
}

# clone_modules

## List of modules used by AutoYaST for cloning the configuration
clone_modules = element clone_modules {
    LIST,
    element clone_module { text }+
}

# clone_modules

# texts

## Control-file texts marked for translation
texts = element texts {
    element * {
	element label { text }
    }+
}

# texts

# proposals

## There are two types of element 'proposal_modules'
##  1.) proposal_modules with attributes 'name' and 'presentation_order'
##  2.) proposal_modules with inexplicit 'name'

## Proposal module with 'name' and 'presentation_order'
proposal_module = element proposal_module {
    ## Proposal name
    element name { text }? &
    ## Presentation order in the current proposal (integer).
    ## Lower numbers first.
    element presentation_order { text }? &
    ## Read only flag - if "hard" the proposal cannot be changed (clicked) by user,
    ## if "soft" the proposal can be changed in case of error. By default is every
    # proposal writable
    element read_only { text }? &
    ## Inexplicit proposal name if not explicitely defined by 'name' and 'presentation_order'
    text?
}

## Proposal defines one configuration step with one or more proposal_modules
## inside. Proposal modules usually depend on each other so the order does
## matter. If you want to list proposal modules in a different order, use
## 'presentation' order attribute.
proposal = element proposal {
    ## Unique ID of the proposal
    element unique_id { text } &
    ##
    element label { text }? &
    ## Defines for which architectures is this proposal used.
    ## Comma-separated list of architectures as seen in
    ## /usr/share/YaST2/modules/Arch.ycp
    ## Valid for all architectures if not explicitely defined.
    ## See Arch::arch_short
    element archs { text }? &
    ## Defines for which mode is this proposal used.
    ## Comma-separated list of modes as seen in
    ## /usr/share/YaST2/modules/Mode.ycp
    ## Valid for all modes if not explicitely defined.
    element mode { text }? &
    ## Defines for which stage is this proposal used.
    ## Comma-separated list of stages as seen in
    ## /usr/share/YaST2/modules/Stage.ycp
    ## Valid for all stages if not explicitely defined.
    element stage { text } &
    ## Proposal name used later to define which proposal to use
    element name { text }? &
    element type { text }? &
    ## Defines whether a proposal can be skipped
    element enable_skip { YES_NO }? &
    ## List of modules in proposal
    element proposal_modules {
	LIST,
	proposal_module+
    }? &
    ## Defines how/whether tabs are used in proposal, e.g.,
    ## Simple tab vs. Expert tab.
    ## If tabs are used, 'proposal_modules' above is still used
    ## but its presentation_order ignored.
    element proposal_tabs {
	LIST,
	## Defines one tab in a proposal
	element proposal_tab {
	    ## Label on the tab
	    element label { text } &
	    ## List of proposal modules
	    element proposal_modules {
		LIST,
		proposal_module+
	    }
	}+
    }?
}

# List of all proposals in control file
proposals = element proposals {
    LIST,
    proposal+
}

# proposals

# workflows

# Describes one step in a workflow
module = element module {
    ## Name of a step.
    ## Used as an identification for updating, removing etc. of steps.
    ## If 'execute' is not used, 'name' also defines name of a YCP script
    ## called by YaST. In installation or upgrade, all script have to match
    ## inst_(.*) regexp.
    element name { text }? &
    ## Defines exact name of a YCP script (without .ycp suffix)
    element execute { text }? &
    ## Defines a configuration step shown in workflow with steps.
    ## If empty, a label defined in closes step before is used.
    element label { text }? &
    ## Defines a heading step. Heading usually does not have any client
    ## to run and defines only the major step in workflow.
    element heading { text }? &
    ## Defines for which architectures is this module used.
    ## Comma-separated list of architectures as seen in
    ## /usr/share/YaST2/modules/Arch.ycp
    ## Valid for all architectures if not explicitely defined.
    ## See Arch::arch_short
    element archs { text }? &
    ## Defines which proposal to call in this step.
    ## Proposal 'name' is used.
    element proposal { text }? &
    ## Defines whether the [Back] button is enabled by default in this step.
    element enable_back { YES_NO }? &
    ## Defines whether the [Next] button is enabled by default in this step.
    element enable_next { YES_NO }? &
    ## Additional module arguments
    element arguments {
	element first_run { YES_NO }?
	| element * { text }*
	# used in autoyast
	| text
    }? &
    ## Should YaST retranslate the whole screen after this client is called?
    ## Default is 'true'.
    element retranslate { BOOLEAN }? &
    element update { BOOLEAN }? &
    ## Defines whether a module is enabled by default.
    ## Default value is 'true'
    element enabled { BOOLEAN }? &
    ## Script body called before the described step
    element prescript {
	## @example
	## shell
	element interpreter { text } &
	## @example
	## <![CDATA[#!/bin/sh
	## echo test > /tmp/test
	## ]]>
	element source { text }
    }? &
    ## Script body called after the described step
    element postscript {
	element interpreter { text } &
	element source { text }
    }?
}

## Defines the default workflow settings
workflow_defaults = element defaults {
    ## For which architectures is this default valid
    element archs { text }? &
    ## Special patemeters used by AutoYaST
    element arguments { text }? &
    ## Is [Back] button enabled by default?
    ## If not set, default values is 'yes'.
    element enable_back { YES_NO }? &
    ## Is [Next] button enabled by default?
    ## If not set, default values is 'yes'.
    element enable_next { YES_NO }?
}

## Workflow, defines for instance, 'second stage installation'
workflow = element workflow {
    workflow_defaults? &
    ## Superstep name visible in UI
    element label { text }? &
    ## Defines for which mode is this proposal used.
    ## Comma-separated list of modes as seen in
    ## /usr/share/YaST2/modules/Mode.ycp
    ## Valid for all modes if not explicitely defined.
    element mode { text } &
    ## Defines for which stage is this workflow used.
    ## Comma-separated list of stages as seen in
    ## /usr/share/YaST2/modules/Stage.ycp
    ## Valid for all stages if not explicitely defined.
    element stage { text } &
    ## List of modules in workflow
    element modules {
	LIST,
	module+
    }
}

# List of all defined workflows
workflows = element workflows {
    LIST,
    workflow+
}

# workflows

# inst_finish_stages

inst_finish_stages = element inst_finish_stages {
    LIST,
    element inst_finish_stage {
	element label { text } &
	element steps {
	    LIST,
	    element step { text }+
	}
    }+
}

# inst_finish_stages

# update

update_workflow = element workflow {
    workflow_defaults? &
    element label { text }? &
    element stage { text } &
    element mode { text } &
    element insert_modules {
        LIST,
        element insert_module {
            element before { text } &
            element modules {
                LIST,
                module+
            }
        }+
    }? &
    element append_modules {
        LIST,
        module+
    }? &
    element remove_modules {
        LIST,
        element remove_module { text }+
    }? &
    element replace_modules {
        LIST,
        element replace_module {
            element replace { text } &
            element modules {
                LIST,
                module+
            }
        }+
    }?
}

update_proposal = element proposal {
    element stage { text } &
    element mode { text } &
    element label { text }? &
    element name { text } &
    element enable_skip { YES_NO }? &
    element append_modules {
	LIST,
	element append_module { text }+
    }? &
    element remove_modules {
	LIST,
	element remove_module { text }+
    }? &
    element replace_modules {
	LIST,
	element replace_module {
	    element replace { text } &
	    element new_modules {
		LIST,
		element new_module { text }+
	    }
	}
    }?
}

update_system_roles = element system_roles {
    element insert_system_roles {
        LIST,
        element insert_system_role { system_roles }+
    }?
}

update = element update {
    element proposals {
        LIST,
        update_proposal+
    }? &
    element workflows {
        LIST,
        update_workflow+
    }? &
    element inst_finish {
        element before_chroot {
            LIST,
            element module { text }+
        }? &
        element after_chroot {
            LIST,
            element module { text }+
        }? &
        element before_umount {
            LIST,
            element module { text }+
        }?
    }? &
    update_system_roles?
}

# update

# not more than one partitioning element
productDefines_elements =
    textdomain*
    & globals*
    & software*
    & partitioning?
    & network*
    & proposals*
    & workflows*
    & clone_modules*
    & texts*
    & inst_finish_stages*
    & update*
    & system_roles*

start = element productDefines {
    productDefines_elements
}

debug_deploying = element debug_deploying { BOOLEAN }
