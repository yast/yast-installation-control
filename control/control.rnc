#
# IMPORTANT!: After editing control.rnc run "make" to generate the
# RNG file and commit _both_ files to Git to keep them in sync!
#
# We do not generate the RNG file at build time as it adds huge dependecy (it
# is a Java tool so it requires complete Java stack)
#

default namespace = "http://www.suse.com/1.0/yast2ns"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace config = "http://www.suse.com/1.0/configns"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

# Single hash comments #  become <!-- XML comments-->
# Double hash comments ## are preserved in .rng as <a:documentation>

## Defined data-types

BOOLEAN =
  (
    ## Historically we used config:type
    ## but it is unnecessarily long to type and read.
    ## Shorter variants are allowed.
    # This could be expressed also as
    # 'attribute ( t | type | config:type ) { "boolean" }'
    # but libxml2-2.9.7 xmllint considers it incorrect schema :-(
    ( attribute t           { "boolean" } |
      attribute type        { "boolean" } |
      attribute config:type { "boolean" } ),
    ( "true" | "false" )
  )

INTEGER =
  (
    ( attribute t           { "integer" } |
      attribute type        { "integer" } |
      attribute config:type { "integer" } ),
    xsd:integer
  )

STRING =
  (
    ( attribute t           { "string" } |
      attribute type        { "string" } |
      attribute config:type { "string" } ) ?,
    text
  )

SYMBOL =
  (
      attribute t           { "symbol" } |
      attribute type        { "symbol" } |
      attribute config:type { "symbol" }
  )

LIST =
  (
      attribute t           { "list" } |
      attribute type        { "list" } |
      attribute config:type { "list" }
  )

MAP =
  (
      attribute t           { "map" } |
      attribute type        { "map" } |
      attribute config:type { "map" }
  ) ?

DISKSIZE =
  (
    ( attribute t           { "string" | "disksize" } |
      attribute type        { "string" | "disksize" } |
      attribute config:type { "string" | "disksize" } ) ?,
    (
      "unlimited"
      | list {
        xsd:integer,
        (
          "B"
          | "KiB" | "MiB" | "GiB" | "TiB" | "PiB" | "EiB" | "ZiB" | "YiB"
          | "KB" | "MB" | "GB" | "TB" | "PB" | "EB" | "ZB" | "YB"
        )
      }
    )
  )

ANY =
  (
    BOOLEAN | INTEGER | SYMBOL | LIST | STRING | MAP
  )

YES_NO =
  (
    "yes" | "no"
  )




# types

textdomain = element textdomain { STRING }

# globals

globals_elements =
    additional_kernel_parameters
    | addons_default
    | base_product_license_directory
    | cpu_mitigations
    | debug_deploying
    | debug_workflow
    | default_ntp_servers
    | default_ntp_setup
    | default_subworkflow
    | default_target
    | dhclient_set_hostname
    | disable_os_prober
    | disable_register_w3m
    | display_register_forcereg
    | displaymanager_shutdown
    | enable_autologin
    | enable_autologin
    | enable_clone
    | enable_firewall
    | enable_kdump
    | enable_local_users
    | enable_register_hwdata
    | enable_register_optional
    | enable_sshd
    | firewall_enable_ssh
    | full_system_download_url
    | full_system_media_name
    | incomplete_translation_treshold
    | inform_about_suboptimal_distribution
    | installation_layout
    | installation_ui
    | kexec_reboot
    | language
    | lsm
    | manual_online_update
    | online_repositories_default
    | polkit_default_privs
    | precise_time
    | propose_hibernation
    | readonly_language
    | readonly_timezone
    | register_monthly
    | require_registration
    | rle_offer_rulevel_4
    | root_password_as_first_user
    | root_password_ca_check
    | run_init_scripts_in_parallel
    | save_instsys_content
    | save_y2logs
    | self_update_id
    | self_update_url
    | self_update_version
    # (deprecated) but make it backward compatible (bsc#1194403)
    | selinux
    | services_proposal
    | show_addons
    | show_drivers_info
    | show_online_repositories
    | skip_language_dialog
    | subworkflows
    | timezone
    | ui_mode
    | write_hostname_to_hosts

## Default kernel parameters proposed by bootloader
additional_kernel_parameters =		element additional_kernel_parameters { STRING }
## How much per cent is the minimum coverage of translations to consider
## it being 'complete'. Less are reported if user tries to switch to such
## language during installation / upgrade.
incomplete_translation_treshold =	element incomplete_translation_treshold { STRING }
## Directory where the base-product (e.g., SLES) license files are stored
base_product_license_directory =	element base_product_license_directory { STRING }
## Defines an UI mode used in some modules to differentiate between
## 'simple' and 'expert' (obsolete).
ui_mode =				element ui_mode { "expert" | "simple" }
## Writes DISPLAYMANAGER_SHUTDOWN to /etc/sysconfig/displaymanager
## if set
displaymanager_shutdown =		element displaymanager_shutdown { STRING }
## Writes POLKIT_DEFAULT_PRIVS to /etc/sysconfig/security
## if set
polkit_default_privs =			element polkit_default_privs { STRING }
## Defines the default subworkflow name (smaller subworkflow
## created from another workflow).
## Used by Wagon.
default_subworkflow =			element default_subworkflow { STRING }
## Default language
language =				element language { STRING }
## Language cannot be changed by the user
readonly_language =			element readonly_language { BOOLEAN }
## Default timezone
timezone =				element timezone { STRING }
## Timezone cannot be changed by the user
readonly_timezone =			element readonly_timezone { BOOLEAN }
## Default runlevel
default_target =				element default_target { STRING }

## Debugging feature, makes workflow manaher to write
## more detailed log entries
debug_workflow =			element debug_workflow { BOOLEAN }
## Default value for autologin
enable_autologin =			element enable_autologin { BOOLEAN }
## Default value for firewall
enable_firewall =			element enable_firewall { BOOLEAN }
## Default value for opening port for SSH in firewall
firewall_enable_ssh =			element firewall_enable_ssh { BOOLEAN }
## Default value for SSHD service
enable_sshd =			        element enable_sshd { BOOLEAN }
## Default value whether to write a system hostname to /etc/hosts
write_hostname_to_hosts =		element write_hostname_to_hosts { BOOLEAN }
## Default value whether to change hostname via DHCP
dhclient_set_hostname =		element dhclient_set_hostname { BOOLEAN }
## Defines whether startup scripts should run in a parallel mode.
## This speeds the starting up but it is worse for debugging.
## *obsolete* without replacement
run_init_scripts_in_parallel =		element run_init_scripts_in_parallel { BOOLEAN }
inform_about_suboptimal_distribution =	element inform_about_suboptimal_distribution { BOOLEAN }
skip_language_dialog =			element skip_language_dialog { BOOLEAN }
## Defines whether an AytoYaST cloning feature should be enabled
enable_clone =				element enable_clone { BOOLEAN }
## Defines if YaST logs are collected after finishing the installation/update
## Default is true.
## The TAR file will be stored in /var/log/YaST2/yast-installation-logs.tar.xz.
save_y2logs =				element save_y2logs { BOOLEAN }
## Default value for 'send hardware data' with registration
## *obsolete* without replacement
enable_register_hwdata =		element enable_register_hwdata { BOOLEAN }
## Default value for 'send optional system data' with registration
## *obsolete* without replacement
enable_register_optional =		element enable_register_optional { BOOLEAN }
## Defines if by default os probing should be disabled see. Default is false. (bnc#884007)
disable_os_prober =			element disable_os_prober { BOOLEAN }
## *obsolete* without replacement
display_register_forcereg =		element display_register_forcereg { BOOLEAN }
## *obsolete* without replacement
disable_register_w3m =			element disable_register_w3m { BOOLEAN }
## *obsolete* without replacement
register_monthly =			element register_monthly { BOOLEAN }
manual_online_update =			element manual_online_update { BOOLEAN }
root_password_as_first_user =		element root_password_as_first_user { BOOLEAN }
root_password_ca_check =		element root_password_ca_check { BOOLEAN }
enable_local_users =                    element enable_local_users { BOOLEAN }
show_online_repositories =		element show_online_repositories { BOOLEAN }
online_repositories_default =		element online_repositories_default { BOOLEAN }
show_addons =				element show_addons { BOOLEAN }
addons_default =			element addons_default { BOOLEAN }
## Defines whether kexec is the preferred mode instead of rebooting
## between the first and the second stage of installation
kexec_reboot =				element kexec_reboot { BOOLEAN }
## Defines whether a special runlevel 4 should be offered
## *obsolete* without replacement
rle_offer_rulevel_4 =			element rle_offer_rulevel_4 { BOOLEAN }
default_ntp_setup =			element default_ntp_setup { BOOLEAN }
## Defines whether kdump is enabled by default
enable_kdump =				element enable_kdump { BOOLEAN }
require_registration =			element require_registration { BOOLEAN }
show_drivers_info =			element show_drivers_info { BOOLEAN }
# Self-update URL (FATE#319716).
## How it works?
## here are two related keys for self update - URL and ID.
## The ID is used to ask SCC for update URL.
## The URL is used as fallback when SCC query failed.
self_update_url =			element self_update_url { STRING }
# Self-update id (bsc#1055556).
## It is an ID used to query SCC for the self update repo.
self_update_id =			element self_update_id { STRING }
## Optional version for the product ID
self_update_version =		element self_update_version { STRING }
# Installation UI (boo#1088785)
## Enables alternative look of installation with sidebar.
## This options is deprecated if favor of installation_layout.
installation_ui =			element installation_ui { "sidebar" }
## Configures the installation UI layout.
installation_layout = element installation_layout {
  MAP,
  (
    ## General layout mode
    element mode { "steps" | "title-on-left" | "title-on-top" }? &
    ## Top banner where logo is usually placed
    element banner { BOOLEAN }?
  )
}
# Default value for CPU Mitigation settings in bootloader
## possible values are same as for autoyast and in UI - auto, nosmt, off, manual
## see ::Bootloader::CpuMitigations.from_string
cpu_mitigations =			element cpu_mitigations { "auto" | "nosmt" | "off" | "manual" }
# Media name which contains ALL packages for an useful installation
# full_system_download_url has also to be set in order to display it.
full_system_media_name =		element full_system_media_name { STRING }
# URL where the media described in full_system_download_url is located.
# full_system_media_name has also to be set in order to display it.
full_system_download_url =		element full_system_download_url { STRING }
## Defines if product needs precise time. It is short time workaround for bsc#1145193
precise_time =		        	element precise_time { BOOLEAN }
## Defines if makes sense for product to propose hibernation (jsc#SLE-12280)
## by default true
propose_hibernation =	        	element propose_hibernation { BOOLEAN }
## Defines list of default ntp servers from which product can pick.
## Used mainly to distinguish between openSUSE and SUSE products. See bsc#1180699
default_ntp_servers = element default_ntp_servers {
  LIST,
  element ntp_server { STRING }*
}

## Linux Security Module configuration ## 
## Whether the module can be proposed/configured during installation
lsm_configurable = element configurable  { BOOLEAN }
## Whether the module can be selected during installation
lsm_selectable = element selectable  { BOOLEAN }
## Space-separated list of required/suggested patterns for the module
lsm_patterns =  element patterns { text }

lsm = element lsm { MAP,
  (
    lsm_select? &
    lsm_configurable? &
    lsm_selectable? &
    none_module? &
    selinux? &
    apparmor?
  )
}

# Linux Security Major Module to be activated after installation
lsm_select = element select { "apparmor" | "selinux" | "none" }
lsm_module =
  lsm_configurable
  | lsm_selectable
  | lsm_patterns


## AppArmor options
apparmor = element apparmor { MAP,
  lsm_module*
}

# None options
none_module = element none { MAP,
  lsm_selectable?
}

## SELinux mode
selinux_mode = element mode { "disabled" | "permissive" | "enforcing" }

## SELinux options
selinux = element selinux {
  MAP,
    (
      lsm_module*
      | selinux_mode?
    )*
}

## Defines which pieces of installation system should be copied to
## the installed system before rebooting to second stage.
save_instsys_content = element save_instsys_content {
    LIST,
    element save_instsys_item {
        MAP,
        (
          ## Where to copy the installation-system file or directory
          ## Absolut path is required.
          element system_directory { STRING } &
          ## Which file or directory to copy to installed system
          ## Absolut path is required.
          element instsys_directory { STRING }
        )
    }+
}

services_proposal = element services_proposal {
    LIST,
    element service {
        MAP,
        (
          element label_id { STRING }? &
          element service_names { STRING } &
          element firewall_plugins { STRING }? &
          element enabled_by_default { BOOLEAN }? &
          element packages { STRING }?
        )
    }+
}

subworkflows = element subworkflows {
    LIST,
    element subworkflow {
        MAP,
        (
          element name { STRING } &
          element modules {
              LIST,
              element module { STRING }+
          }? &
          element proposals {
              LIST,
              element proposal { STRING }+
          }?
        )
    }+
}

## Global variables
globals = element globals {
    MAP,
    globals_elements*
}

# globals

# software

software_elements =
    delete_old_packages
    | select_product
    | delete_old_packages_reverse_list
    | disable_media_repo
    | silently_downgrade_packages
    | silently_downgrade_packages_reverse_list
    | products_supported_for_upgrade
    | selection_type
    | default_system_scenario
    | supported_desktops
    | default_desktop
    | display_support_status
    | clone_install_recommended_default
    | online_repos_preselected
    | external_sources_link
    | dropped_packages
    | extra_urls
    | base_selection
    | packages_affecting_pkg_manager
    | software_base
    | software_addons
    | software_packages
    | kernel_packages
    | packages_transmogrify
    | default_patterns
    | optional_default_patterns
    | upgrade
    | minimalistic_libzypp_config
    | base_products
    | software_default_modules

## The name of the product which should be selected,
## useful to choose it without asking the user (bsc#1124590).
select_product =	element select_product { STRING }
## Whether it is allowed to delete a package during upgrade
## *obsolete* without replacement
delete_old_packages = element delete_old_packages { BOOLEAN }
## Used in packager to distinguish whether cd / dvd repositories
## should be disabled after installation or not.
disable_media_repo = element disable_media_repo { BOOLEAN }
selection_type = element selection_type { SYMBOL, text }
## System scenario selected by default.
## Used in inst_scenarios client.
default_system_scenario = element default_system_scenario { STRING }
## Desktop selected by default
default_desktop = element default_desktop { STRING }
display_support_status = element display_support_status { BOOLEAN }
clone_install_recommended_default = element clone_install_recommended_default { BOOLEAN }
silently_downgrade_packages = element silently_downgrade_packages { BOOLEAN }
online_repos_preselected = element online_repos_preselected { BOOLEAN }
external_sources_link = element external_sources_link { STRING }
## Packages that should be removed by the upgrade.
## Comma and/or space-separated list of packages
dropped_packages = element dropped_packages { STRING }

base_selection = element base_selection { STRING }
software_base = element base { STRING }

## a client that is called to modifiy the list of selected kernel packages
packages_transmogrify = element packages_transmogrify { STRING }

software_addons = element addons {
    LIST,
    element addon { STRING }+
}

software_packages = element packages {
    LIST,
    element package { STRING }+
}

# the default preselected products (modules) for the base product, used only
# in Full medium offline installation, see https://jira.suse.com/browse/SLE-8040
software_default_modules = element default_modules {
    LIST,
    element default_module { STRING }*
}

kernel_packages = element kernel_packages {
    LIST,
    element package { STRING }+
}

## *obsolete* without replacement
delete_old_packages_reverse_list = element delete_old_packages_reverse_list {
    LIST,
    element regexp_item { STRING }+
}

supported_desktops = element supported_desktops {
    LIST,
    element one_supported_desktop {
        MAP,
        (
          element name { STRING } &
          element desktop { STRING } &
          element label_id { STRING }? &
          element logon { STRING } &
          element cursor { STRING } &
          element packages { STRING }? &
          element order { INTEGER }? &
          element patterns { STRING } &
          element icon { STRING }? &
          element description_id { STRING }?
        )
    }+
}

## List of products supported to be upgraded by this product
products_supported_for_upgrade = element products_supported_for_upgrade {
    LIST,
    ## One regular expression to match a product to upgrade
    element regexp_item { STRING }+
}

silently_downgrade_packages_reverse_list = element silently_downgrade_packages_reverse_list {
    LIST,
    element regexp_item { STRING }+
}

extra_urls = element extra_urls {
    LIST,
    element extra_url {
        MAP,
        (
          element baseurl { STRING } &
          element name { STRING }? &
          element alias { STRING }? &
          element prod_dir { STRING }? &
          element enabled { BOOLEAN }? &
          element autorefresh { BOOLEAN }? &
          element priority { INTEGER }?
        )
    }+
}

packages_affecting_pkg_manager = element packages_affecting_pkg_manager {
    LIST,
    element package { STRING }+
}

## Space-separated list of default patterns selected for installation.
## If such a pattern doesn't exist, error is reported. To omit reporting
## such error, use optional_default_patterns instead.
## These patterns are not selected in auto-installation.
default_patterns = element default_patterns { STRING }

## Space-separated list of (optional) default patterns for installation.
## These patterns will be selected only if they exist and thus it will
## never report any error if a pattern is not found. Use default_patterns
## for mandatory default patterns.
## These patterns are not selected in auto-installation.
optional_default_patterns = element optional_default_patterns { STRING }

## Defines behavior during upgrade
upgrade = element upgrade {
    MAP,
    (
      ## Optional list of upgrade paths for default window manager set
      ## in /etc/sysconfig/windowmanager:DEFAULT_WM (not all cases need to be handled)
      element window_managers {
          LIST,
          element window_manager {
            MAP,
            (
              ## Windowmanager as found in /etc/sysconfig/windowmanager:DEFAULT_WM
              ## This entry is mandatory
              element sysconfig_wm { STRING } &
              ## Space-separated list of packages to check whether the selected desktop
              ## is really installed on the system
              element check_packages { STRING }? &
              ## Either install_patterns or install_packages (or both) must be defined
              (
                  ## Optional list of space-separated patterns that should be
                  ## selected for installation
                  element install_patterns { STRING } |
                  ## Optional list of space-separated packages that should be
                  ## selected for installation
                  element install_packages { STRING }
              )+
            )
          }*
      }? &
      element product_upgrades {
          LIST,
          element product_upgrade {
              MAP,
              (
                element from { STRING } &
                element to { STRING } &
                element compatible_vendors {
                  LIST,
                  element compatible_vendor { STRING }*
                }
              )
	  }*
      }?
    )
}

## Software / Package-manager related variables
software = element software {
    MAP,
    software_elements*
}

## Minimalistic libzypp configuration (only requires, no documentation and no multiversion)
minimalistic_libzypp_config = element minimalistic_libzypp_config { BOOLEAN }

# the base products for the SCC (Online medium only)
base_products = element base_products {
    LIST,
    base_product+
}

base_product = element base_product {
    MAP,
    (
      element special_product { BOOLEAN }? &
      element display_name { STRING } &
      element name { STRING } &
      element version { STRING } &
      element register_target { STRING } &
      element archs { STRING }?
    )
}

# software

# partitioning

# An overview of partitioning related settings can be found at
# https://github.com/yast/yast-storage-ng/blob/master/doc/old_and_new_proposal.md
# A more detailed explanation of each setting can be found at
# https://github.com/yast/yast-installation/blob/master/doc/control-file.md#partitioning

partitioning_elements =
    partitioning_proposal
    & partitioning_volumes
    & expert_partitioner_warning?

expert_partitioner_warning =    element expert_partitioner_warning { BOOLEAN }

## Optional, but if this element appears (even if it's empty),
## the internal fallback list is not used
subvolumes = element subvolumes {
    LIST,
    subvolume*
}?

subvolume = element subvolume {
    MAP,
    (
      ## subvolume path without leading /
      element path { STRING } &

      ## Optional: COW; default: true
      element copy_on_write { BOOLEAN }? &

      ## Optional: comma-separated architectures (default: all)
      ## Prepend ! to negate
      ## Example 1: i386,x86_64
      ## Example 2: ppc,!board_powernv
      ## (i.e. on PPC, but not if it's a board_powernv machine
      element archs { STRING }?
    )
}

partitioning_proposal = element proposal {
  MAP,
  partitioning_proposal_elements
}

partitioning_proposal_elements =
    lvm?
    & separate_vgs?
    & resize_windows?
    & windows_delete_mode?
    & linux_delete_mode?
    & other_delete_mode?
    & lvm_vg_strategy?
    & lvm_vg_size?
    & delete_resize_configurable?
    & allocate_volume_mode?
    & multidisk_first?

lvm = element lvm { BOOLEAN }
separate_vgs = element separate_vgs { BOOLEAN }
resize_windows = element resize_windows { BOOLEAN }
windows_delete_mode = element windows_delete_mode { SYMBOL, delete_mode_enum }
linux_delete_mode = element linux_delete_mode { SYMBOL, delete_mode_enum }
other_delete_mode = element other_delete_mode { SYMBOL, delete_mode_enum }
lvm_vg_strategy = element lvm_vg_strategy { SYMBOL, lvm_vg_strategy_enum }
lvm_vg_size = element lvm_vg_size { DISKSIZE }
delete_resize_configurable = element delete_resize_configurable { BOOLEAN }
allocate_volume_mode = element allocate_volume_mode { SYMBOL, allocate_volume_mode_enum }
multidisk_first = element multidisk_first { BOOLEAN }

delete_mode_enum = "none" | "ondemand" | "all"
allocate_volume_mode_enum = "auto" | "device"
lvm_vg_strategy_enum = "use_available" | "use_needed" | "use_vg_size"

partitioning_volumes =  element volumes {
  LIST,
  partitioning_volume+
}

partitioning_volume = element volume {
  MAP,
  partitioning_volume_elements
}

partitioning_volume_elements =
  mount_point?
  & mount_options?
  & proposed?
  & proposed_configurable?
  & fs_types?
  & fs_type?
  & desired_size?
  & min_size?
  & max_size?
  & max_size_lvm?
  & weight?
  & adjust_by_ram?
  & adjust_by_ram_configurable?
  & fallback_for_desired_size?
  & fallback_for_min_size?
  & fallback_for_max_size?
  & fallback_for_max_size_lvm?
  & fallback_for_weight?
  & snapshots?
  & snapshots_configurable?
  & snapshots_size_or_percentage?
  & subvolumes?
  & btrfs_default_subvolume?
  & disable_order?
  & btrfs_read_only?
  & separate_vg_name?

snapshots_size_or_percentage = snapshots_size | snapshots_percentage

mount_point = element mount_point { STRING }
mount_options = element mount_options { STRING }
proposed = element proposed { BOOLEAN }
proposed_configurable = element proposed_configurable { BOOLEAN }
fs_types = element fs_types { STRING }
fs_type = element fs_type { STRING }
desired_size = element desired_size { DISKSIZE }
min_size = element min_size { DISKSIZE }
max_size = element max_size { DISKSIZE }
max_size_lvm = element max_size_lvm { DISKSIZE }
weight = element weight { INTEGER }
adjust_by_ram = element adjust_by_ram { BOOLEAN }
adjust_by_ram_configurable = element adjust_by_ram_configurable { BOOLEAN }
fallback_for_desired_size = element fallback_for_desired_size { STRING }
fallback_for_min_size = element fallback_for_min_size { STRING }
fallback_for_max_size = element fallback_for_max_size { STRING }
fallback_for_max_size_lvm = element fallback_for_max_size_lvm { STRING }
fallback_for_weight = element fallback_for_weight { STRING }
snapshots = element snapshots { BOOLEAN }
snapshots_configurable = element snapshots_configurable { BOOLEAN }
snapshots_size = element snapshots_size { DISKSIZE }
snapshots_percentage = element snapshots_percentage { INTEGER }
btrfs_default_subvolume = element btrfs_default_subvolume { STRING }
disable_order = element disable_order { INTEGER }
btrfs_read_only = element btrfs_read_only { BOOLEAN }
separate_vg_name = element separate_vg_name { STRING }

## Partitioning-related variables
partitioning = element partitioning {
    MAP,
    partitioning_elements
}

# partitioning

# network

network_elements =
    force_static_ip
    | network_manager
    | startmode
    | ipv4_forward
    | ipv6_forward

force_static_ip =	element force_static_ip { BOOLEAN }
network_manager =	element network_manager { STRING }
startmode =		element startmode { STRING }
ipv4_forward = element ipv4_forward { BOOLEAN }
ipv6_forward = element ipv6_forward { BOOLEAN }


## Network configuration-related variables
network = element network {
    MAP,
    network_elements*
}

# network

# system_roles

## System Roles, FATE#317481
system_roles = element system_roles {
    LIST,
    ## The first one is preselected in the dialog.
    ## If empty, the dialog is skipped.
    system_role*
}

system_role = element system_role {
    MAP,
    (
      ## An identifier not visible to the user.
      ## Used to identify the translated user visible strings in the
      ## texts section: ${id} and ${id}_description.
      element id { STRING } &

      ## option to not preselect any role, by default,
      ## the first one (by sort order, see below) is preselected
      ## Only the first (by sort order, see below) role should have this key, others are ignored.
      element no_default { BOOLEAN }? &

      ## Option for order of role. Roles are sorted by order, the smaller first. It can be negative.
      ## If two roles have same order, then result is undefined, so try to avoid it.
      element order { INTEGER } &

      ## Role specific overrides for Partitioning
      partitioning? &

      ## Role specific overrides for Software
      software? &

      ## Additional dialogs that are runned when given role is selected, comma separated
      element additional_dialogs { STRING }? &

      ## Additional services configuration for given role
      role_services? &

      ## Role specific overrides for Global
      globals* &

      ## Role specific overrides for Network
      network* &

      ## Role specific overrides for Proposals
      proposals* &

      ## Role specific overrides for Cloned modules
      clone_modules*
    )
}

role_services = element services {
    LIST,
    ## specification of one service for given role
    role_service*
}

role_service = element service {
    MAP,
    element name { STRING }
}

# clone_modules

## List of modules used by AutoYaST for cloning the configuration
clone_modules = element clone_modules {
    LIST,
    element clone_module { STRING }+
}

# clone_modules

# texts

## Control-file texts marked for translation
texts = element texts {
    MAP,
    element * {
        MAP,
	element label { STRING }
    }+
}

# texts

# proposals

## There are two types of element 'proposal_modules'
##  1.) proposal_modules with attributes 'name' and 'presentation_order'
##  2.) proposal_modules with inexplicit 'name'

## Proposal module with 'name' and 'presentation_order'
proposal_module = element proposal_module {
    (
      MAP,
      (
        ## Proposal name
        element name { STRING }? &
        ## Presentation order in the current proposal (integer).
        ## Lower numbers first.
        element presentation_order { STRING }? &
        ## Read only flag - if "hard" the proposal cannot be changed (clicked) by user,
        ## if "soft" the proposal can be changed in case of error. By default is every
        # proposal writable
        element read_only { STRING }?
      )
    ) |
    ## Inexplicit proposal name if not explicitely defined by 'name' and 'presentation_order'
    STRING
}

## Proposal defines one configuration step with one or more proposal_modules
## inside. Proposal modules usually depend on each other so the order does
## matter. If you want to list proposal modules in a different order, use
## 'presentation' order attribute.
proposal = element proposal {
    MAP,
    (
      ## Unique ID of the proposal
      element unique_id { STRING } &
      ##
      element label { STRING }? &
      ## Defines for which architectures is this proposal used.
      ## Comma-separated list of architectures as seen in
      ## /usr/share/YaST2/modules/Arch.ycp
      ## Valid for all architectures if not explicitely defined.
      ## See Arch::arch_short
      element archs { STRING }? &
      ## Defines for which mode is this proposal used.
      ## Comma-separated list of modes as seen in
      ## /usr/share/YaST2/modules/Mode.ycp
      ## Valid for all modes if not explicitely defined.
      element mode { STRING }? &
      ## Defines for which stage is this proposal used.
      ## Comma-separated list of stages as seen in
      ## /usr/share/YaST2/modules/Stage.ycp
      ## Valid for all stages if not explicitely defined.
      element stage { STRING } &
      ## Proposal name used later to define which proposal to use
      element name { STRING }? &
      element type { STRING }? &
      ## Defines whether a proposal can be skipped
      element enable_skip { YES_NO }? &
      ## List of modules in proposal
      element proposal_modules {
          LIST,
          proposal_module+
      }? &
      ## Defines how/whether tabs are used in proposal, e.g.,
      ## Simple tab vs. Expert tab.
      ## If tabs are used, 'proposal_modules' above is still used
      ## but its presentation_order ignored.
      element proposal_tabs {
          LIST,
          ## Defines one tab in a proposal
          element proposal_tab {
              MAP,
              (
                ## Label on the tab
                element label { STRING } &
                ## List of proposal modules
                element proposal_modules {
                    LIST,
                    proposal_module+
                }
              )
          }+
      }?
    )
}

# List of all proposals in control file
proposals = element proposals {
    LIST,
    proposal+
}

# proposals

# workflows

# Describes one step in a workflow
module = element module {
    MAP,
    (
      ## Name of a step.
      ## Used as an identification for updating, removing etc. of steps.
      ## If 'execute' is not used, 'name' also defines name of a YCP script
      ## called by YaST. In installation or upgrade, all script have to match
      ## inst_(.*) regexp.
      element name { STRING }? &
      ## Defines exact name of a YCP script (without .ycp suffix)
      element execute { STRING }? &
      ## Defines a configuration step shown in workflow with steps.
      ## If empty, a label defined in closes step before is used.
      element label { STRING }? &
      ## Defines a heading step. Heading usually does not have any client
      ## to run and defines only the major step in workflow.
      element heading { STRING }? &
      ## Defines for which architectures is this module used.
      ## Comma-separated list of architectures as seen in
      ## /usr/share/YaST2/modules/Arch.ycp
      ## Valid for all architectures if not explicitely defined.
      ## See Arch::arch_short
      element archs { STRING }? &
      ## Defines which proposal to call in this step.
      ## Proposal 'name' is used.
      element proposal { STRING }? &
      ## Defines whether the [Back] button is enabled by default in this step.
      element enable_back { YES_NO }? &
      ## Defines whether the [Next] button is enabled by default in this step.
      element enable_next { YES_NO }? &
      ## Additional module arguments
      element arguments {
          (
            MAP,
            element first_run { YES_NO }?
          )
          | (
            MAP,
            element * { STRING }*
          )
          # used in autoyast
          | STRING
      }? &
      ## Should YaST retranslate the whole screen after this client is called?
      ## Default is 'true'.
      element retranslate { BOOLEAN }? &
      element update { BOOLEAN }? &
      ## Defines whether a module is enabled by default.
      ## Default value is 'true'
      element enabled { BOOLEAN }? &
      ## Script body called before the described step
      element prescript {
          MAP,
          (
            ## @example
            ## shell
            element interpreter { STRING } &
            ## @example
            ## <![CDATA[#!/bin/sh
            ## echo test > /tmp/test
            ## ]]>
            element source { STRING }
          )
      }? &
      ## Script body called after the described step
      element postscript {
          MAP,
          (
            element interpreter { STRING } &
            element source { STRING }
          )
      }?
    )
}

## Defines the default workflow settings
workflow_defaults = element defaults {
    MAP,
    (
      ## For which architectures is this default valid
      element archs { STRING }? &
      ## Special patemeters used by AutoYaST
      element arguments { STRING }? &
      ## Is [Back] button enabled by default?
      ## If not set, default values is 'yes'.
      element enable_back { YES_NO }? &
      ## Is [Next] button enabled by default?
      ## If not set, default values is 'yes'.
      element enable_next { YES_NO }?
    )
}

## Workflow, defines for instance, 'second stage installation'
workflow = element workflow {
    MAP,
    (
      workflow_defaults? &
      ## Superstep name visible in UI
      element label { STRING }? &
      ## Defines for which mode is this proposal used.
      ## Comma-separated list of modes as seen in
      ## /usr/share/YaST2/modules/Mode.ycp
      ## Valid for all modes if not explicitely defined.
      element mode { STRING } &
      ## Defines for which stage is this workflow used.
      ## Comma-separated list of stages as seen in
      ## /usr/share/YaST2/modules/Stage.ycp
      ## Valid for all stages if not explicitely defined.
      element stage { STRING } &
      ## List of modules in workflow
      element modules {
          LIST,
          module+
      }
    )
}

# List of all defined workflows
workflows = element workflows {
    LIST,
    workflow+
}

# workflows

# inst_finish_stages

inst_finish_stages = element inst_finish_stages {
    LIST,
    element inst_finish_stage {
        MAP,
        (
          element label { STRING } &
          element steps {
              LIST,
              element step { STRING }+
          }
        )
    }+
}

# inst_finish_stages

# update

update_workflow = element workflow {
    MAP,
    (
      workflow_defaults? &
      element label { STRING }? &
      element stage { STRING } &
      element mode { STRING } &
      element insert_modules {
          LIST,
          element insert_module {
              element before { STRING } &
              element modules {
                  LIST,
                  module+
              }
          }+
      }? &
      element append_modules {
          LIST,
          module+
      }? &
      element remove_modules {
          LIST,
          element remove_module { STRING }+
      }? &
      element replace_modules {
          LIST,
          element replace_module {
              MAP,
              (
                element replace { STRING } &
                element modules {
                    LIST,
                    module+
                }
              )
          }+
      }?
    )
}

update_proposal = element proposal {
    MAP,
    (
      element stage { STRING } &
      element mode { STRING } &
      element label { STRING }? &
      element name { STRING } &
      element enable_skip { YES_NO }? &
      element append_modules {
          LIST,
          element append_module { STRING }+
      }? &
      element remove_modules {
          LIST,
          element remove_module { STRING }+
      }? &
      element replace_modules {
          LIST,
          element replace_module {
              MAP,
              (
                element replace { STRING } &
                element new_modules {
                    LIST,
                    element new_module { STRING }+
                }
              )
          }
      }?
    )
}

update_system_roles = element system_roles {
    MAP,
    element insert_system_roles {
        LIST,
        element insert_system_role { system_roles }+
    }?
}

update = element update {
    MAP,
    (
      element proposals {
          LIST,
          update_proposal+
      }? &
      element workflows {
          LIST,
          update_workflow+
      }? &
      element inst_finish {
          element before_chroot {
              LIST,
              element module { STRING }+
          }? &
          element after_chroot {
              LIST,
              element module { STRING }+
          }? &
          element before_umount {
              LIST,
              element module { STRING }+
          }?
      }? &
      update_system_roles?
    )
}

# update

configuration_management = element configuration_management {
    MAP,
    (
      # Configuration managment system to use
      element type { "salt" | "puppet" } &
      # Host name or IP address of the master server
      element master { STRING }? &
      # Number of attempts when trying to connect to the master server
      element auth_attempts { INTEGER }? &
      # Time between attempts to connect to the master server
      element auth_time_out { INTEGER }? &
      # Path to an HTTTP(S) server, hard disk, USB driver or similar containing the
      # private/public keys to connect to the master server
      element keys_url { STRING }? &
      # Enable the configuration management system services after the installation
      element enable_services { BOOLEAN }? &

      # Salt specific

      # Path to write Pillar data
      element pillar_root { STRING }? &
      # URL to read Pillar data from
      element pillar_url { STRING }? &
      # Paths to search for formulas
      element formulas_roots {
        LIST,
        element formulas_root { STRING }+
      }? &
      # Paths to search for states
      element states_roots {
        LIST,
        element states_root { STRING }+
      }? &
      # URL to get states from
      element states_url { STRING }? &
      # List of states/formulas to enable
      element enabled_states {
        LIST,
        element state { STRING }+
      }? &

      # Puppet specific

      # URL to read Puppet modules from
      element modules_url { STRING }?
    )
}

# not more than one partitioning element
productDefines_elements =
    textdomain*
    & globals*
    & software*
    & partitioning?
    & network*
    & proposals*
    & workflows*
    & clone_modules*
    & texts*
    & inst_finish_stages*
    & update*
    & system_roles*
    & configuration_management?

start = element productDefines {
    productDefines_elements
}

debug_deploying = element debug_deploying { BOOLEAN }
